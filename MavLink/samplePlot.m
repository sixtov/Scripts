%%
function samplePlot(MavLink)

%% Check for PC104 Power ON/OFF
pc104On = [];
pc104idx = find((MavLink.Analog.chan10 > 74) & (MavLink.Analog.chan16 > 70));
% pc104idx = find((MavLink.Analog.chan10.data > 74) & (MavLink.Analog.chan16.data > 70));
if ~isempty(pc104idx)
    junk = [1; diff(pc104idx)];
    idx = [1; find(junk>1); length(junk)+1];
    idx = idx(setdiff(1:length(idx),find(diff(idx)==1)));
    idx = [idx(1:end-1) idx(2:end)-1];
    if isempty(idx)
        idx = [1 length(junk)];
    end
    nseg = size(idx,1);
    pc104On = reshape(MavLink.Analog.time(pc104idx(idx)),nseg,2);
    % pc104On = reshape(MavLink.Analog.chan10.time(pc104idx(idx)),nseg,2);
end

%% Check for RCVR Power ON/OFF
rcvrOn = [];
rcvridx = find((MavLink.RC.Raw.chan5 > 900) & (MavLink.RC.Raw.chan5 ~= 1200));
% rcvridx = find((MavLink.RC.Raw.chan5.data > 900) & (MavLink.RC.Raw.chan5.data ~= 1200));
if ~isempty(rcvridx)
    junk = [1; diff(rcvridx)];
    idx = [1; find(junk>1); length(junk)+1];
    idx = idx(setdiff(1:length(idx),find(diff(idx)==1)));
    idx = [idx(1:end-1) idx(2:end)-1];
    if isempty(idx)
        idx = [1 length(junk)];
    end
    nseg = size(idx,1);
    rcvrOn = reshape(MavLink.RC.Raw.time(rcvridx(idx)),nseg,2);
    % rcvrOn = reshape(MavLink.RC.Raw.chan5.time(rcvridx(idx)),nseg,2);
end

%%
S = MavLink.Analog;
if isfield(S,'time')
    slvFigure('Analog');
    [idxBoth idxPc idxRcvr] = findIdxRgn(S.time,pc104On,rcvrOn);
    % [idxBoth idxPc idxRcvr] = findIdxRgn(S.chan10.time,pc104On,rcvrOn);
    p = [ ...
        (40.0 / 360)  -(61.77); ...
        (20.0 / 238)  -(48.99); ...
        (45.0 / 424)  -(60.18); ...
        (40.5 / 406)  -(52.37); ...
        (20.0 / 203)  -(57.14); ...
        (41.5 / 355)  -(61.77); ...
        (50.0 / 293)  -(98.12); ...
        (360.0 / 860) -(229.20); ...
        (360.0 / 860) -(226.30); ...
        (0.165)       +(59.211); ...
        (1.0)         +(0.0); ...
        (8.040868)    +(0.0); ...
        (0.1230)      -(2.2160); ...
        (0.1239)      -(1.8683); ...
        (1.0)         +(0.0); ...
        (1.0)         +(0.0) ...
        ];
    channel = [ ...
               {'chan01'}; ...
               {'chan02'}; ...
               {'chan03'}; ...
               {'chan04'}; ...
               {'chan05'}; ...
               {'chan06'}; ...
               {'chan07'}; ...
               {'chan08'}; ...
               {'chan09'}; ...
               {'chan10'}; ...
               {'chan11'}; ...
               {'chan12'}; ...
               {'chan13'}; ...
               {'chan14'}; ...
               {'chan15'}; ...
               {'chan16'} ...
              ];
    signal = [ ...
               {'ADC(left ail)'}; ...
               {'ADC(left flap)'}; ...
               {'ADC(left elev)'}; ...
               {'ADC(right elev)'}; ...
               {'ADC(right flap)'}; ...
               {'ADC(right ail)'}; ...
               {'ADC(rudder)'}; ...
               {'ADC(alpha)'}; ...
               {'ADC(beta)'}; ...
               {'ADC(mtrTemp)'}; ...
               {'ADC(notUsed)'}; ...
               {'ADC(RPM)'}; ...
               {'ADC(fwdCurr)'}; ...
               {'ADC(aftCurr)'}; ...
               {'ADC(MUX)'}; ...
               {'ADC(sync)'} ...
             ];
    unit = [ ...
               {'cnt'}; ...
               {'cnt'}; ...
               {'cnt'}; ...
               {'cnt'}; ...
               {'cnt'}; ...
               {'cnt'}; ...
               {'cnt'}; ...
               {'cnt'}; ...
               {'cnt'}; ...
               {'cnt'}; ...
               {'cnt'}; ...
               {'cnt'}; ...
               {'cnt'}; ...
               {'cnt'}; ...
               {'cnt'}; ...
               {'cnt'} ...
             ];
    h = [];
    h = plotSignals(h,S,channel,signal,unit,idxBoth,idxPc,idxRcvr);
end

%%
S = MavLink.RC.Raw;
if isfield(S,'time')
    slvFigure('RC');
    [idxBoth idxPc idxRcvr] = findIdxRgn(S.time,pc104On,rcvrOn);
    % [idxBoth idxPc idxRcvr] = findIdxRgn(S.chan1.time,pc104On,rcvrOn);
    channel = [ ...
               {'chan1'}; ...
               {'chan2'}; ...
               {'chan3'}; ...
               {'chan4'}; ...
               {'chan5'}; ...
               {'chan6'}; ...
               {'chan7'}; ...
               {'chan8'}; ...
              ];
    signal = [ ...
               {'RC(Aileron)'}; ...
               {'RC(Elevator)'}; ...
               {'RC(Throttle)'}; ...
               {'RC(Rudder)'}; ...
               {'RC(not used)'}; ...
               {'RC(Flaps)'}; ...
               {'RC(Event Marker)'}; ...
               {'RC(Mode Select)'}; ...
              ];
    unit = [ ...
               {'pwm'}; ...
               {'pwm'}; ...
               {'pwm'}; ...
               {'pwm'}; ...
               {'pwm'}; ...
               {'pwm'}; ...
               {'pwm'}; ...
               {'pwm'}; ...
              ];
    h = plotSignals(h,S,channel,signal,unit,idxBoth,idxPc,idxRcvr);
end
%%
S = MavLink.Attitude;
if isfield(S,'time')
    slvFigure('Attitude');
    [idxBoth idxPc idxRcvr] = findIdxRgn(S.time,pc104On,rcvrOn);
    % [idxBoth idxPc idxRcvr] = findIdxRgn(S.roll.time,pc104On,rcvrOn);
    channel = [ ...
               {'roll'}; ...
               {'pitch'}; ...
               {'yaw'}; ...
               {'rollspeed'}; ...
               {'pitchspeed'}; ...
               {'yawspeed'}; ...
              ];
    signal = [ ...
               {'Attitude(roll)'}; ...
               {'Attitude(pitch)'}; ...
               {'Attitude(yaw)'}; ...
               {'Attitude(rollspeed)'}; ...
               {'Attitude(pitchspeed)'}; ...
               {'Attitude(yawspeed)'}; ...
              ];
    unit = [ ...
               {'rad'}; ...
               {'rad'}; ...
               {'rad'}; ...
               {'rad/sec'}; ...
               {'rad/sec'}; ...
               {'rad/sec'}; ...
              ];
    h = plotSignals(h,S,channel,signal,unit,idxBoth,idxPc,idxRcvr);
end

%%
S = MavLink.GPS.Raw;
if isfield(S,'time')
    slvFigure('GPS Raw');
    [idxBoth idxPc idxRcvr] = findIdxRgn(S.time,pc104On,rcvrOn);
    % [idxBoth idxPc idxRcvr] = findIdxRgn(S.lat.time,pc104On,rcvrOn);
    channel = [ ...
               {'fix_type'}; ...
               {'lat'}; ...
               {'lon'}; ...
               {'alt'}; ...
               {'eph'}; ...
               {'epv'}; ...
               {'v'}; ...
               {'hdg'}; ...
              ];
    signal =  [ ...
               {'GPS(fix type)'}; ...
               {'GPS(lat)'}; ...
               {'GPS(lon)'}; ...
               {'GPS(alt)'}; ...
               {'GPS(eph)'}; ...
               {'GPS(epv)'}; ...
               {'GPS(v)'}; ...
               {'GPS(hdg)'}; ...
              ];
    unit = [ ...
               {'()'}; ...
               {'deg'}; ...
               {'deg'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
               {'deg'}; ...
              ];
    h = plotSignals(h,S,channel,signal,unit,idxBoth,idxPc,idxRcvr);
end

%%
S = MavLink.Hud;
if isfield(S,'time')
    slvFigure('Hud');
    [idxBoth idxPc idxRcvr] = findIdxRgn(S.time,pc104On,rcvrOn);
    % [idxBoth idxPc idxRcvr] = findIdxRgn(S.alt.time,pc104On,rcvrOn);
    channel = [ ...
               {'airspeed'}; ...
               {'groundspeed'}; ...
               {'heading'}; ...
               {'throttle'}; ...
               {'alt'}; ...
               {'climb'}; ...
              ];
    signal = [ ...
               {'Hud(airspeed)'}; ...
               {'Hud(groundspeed)'}; ...
               {'Hud(heading)'}; ...
               {'Hud(throttle)'}; ...
               {'Hud(alt)'}; ...
               {'Hud(climb)'}; ...
              ];
    unit = [ ...
               {'()'}; ...
               {'()'}; ...
               {'deg'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
              ];
    h = plotSignals(h,S,channel,signal,unit,idxBoth,idxPc,idxRcvr);
end

%%
S = MavLink.Imu;
if isfield(S,'time')
    slvFigure('Imu');
    [idxBoth idxPc idxRcvr] = findIdxRgn(S.time,pc104On,rcvrOn);
    % [idxBoth idxPc idxRcvr] = findIdxRgn(S.xacc.time,pc104On,rcvrOn);
    channel = [ ...
               {'xacc'}; ...
               {'yacc'}; ...
               {'zacc'}; ...
               {'xgyro'}; ...
               {'ygyro'}; ...
               {'zgyro'}; ...
               {'xmag'}; ...
               {'ymag'}; ...
               {'zmag'}; ...
              ];
    signal = [ ...
               {'Imu(xacc)'}; ...
               {'Imu(yacc)'}; ...
               {'Imu(zacc)'}; ...
               {'Imu(xgyro)'}; ...
               {'Imu(ygyro)'}; ...
               {'Imu(zgyro)'}; ...
               {'Imu(xmag)'}; ...
               {'Imu(ymag)'}; ...
               {'Imu(zmag)'}; ...
              ];
    unit = [ ...
               {'g_{x1000}'}; ...
               {'g_{x1000}'}; ...
               {'g_{x1000}'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
              ];
    h = plotSignals(h,S,channel,signal,unit,idxBoth,idxPc,idxRcvr);
end

%%
S = MavLink.Pressure;
if isfield(S,'time')
    slvFigure('Pressure');
    [idxBoth idxPc idxRcvr] = findIdxRgn(S.time,pc104On,rcvrOn);
    % [idxBoth idxPc idxRcvr] = findIdxRgn(S.press_abs.time,pc104On,rcvrOn);
    channel = [ ...
               {'press_abs'}; ...
               {'press_diff'}; ...
               {'temperature'}; ...
              ];
    signal = [ ...
               {'Pressure(abs)'}; ...
               {'Pressure(diff)'}; ...
               {'Pressure(temperature)'}; ...
              ];
    unit = [ ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
              ];
    h = plotSignals(h,S,channel,signal,unit,idxBoth,idxPc,idxRcvr);
end

%%
S = MavLink.Sensor.Offset;
if isfield(S,'time')
    slvFigure('Sensor Offset');
    [idxBoth idxPc idxRcvr] = findIdxRgn(S.time,pc104On,rcvrOn);
    % [idxBoth idxPc idxRcvr] = findIdxRgn(S.mag_ofs_x.time,pc104On,rcvrOn);
    channel = [ ...
               {'mag_ofs_x'}; ...
               {'mag_ofs_y'}; ...
               {'mag_ofs_z'}; ...
               {'mag_declination'}; ...
               {'raw_press'}; ...
               {'raw_temp'}; ...
               {'gyro_cal_x'}; ...
               {'gyro_cal_y'}; ...
               {'gyro_cal_z'}; ...
               {'accel_cal_x'}; ...
               {'accel_cal_y'}; ...
               {'accel_cal_z'}; ...
              ];
    signal = [ ...
               {'Offset(mag ofs x)'}; ...
               {'Offset(mag ofs y)'}; ...
               {'Offset(mag ofs z)'}; ...
               {'Offset(mag declination)'}; ...
               {'Offset(raw press)'}; ...
               {'Offset(raw temp)'}; ...
               {'Offset(gyro cal x)'}; ...
               {'Offset(gyro cal y)'}; ...
               {'Offset(gyro cal z)'}; ...
               {'Offset(accel cal x)'}; ...
               {'Offset(accel cal y)'}; ...
               {'Offset(accel cal z)'}; ...
              ];
    unit = [ ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
              ];
    h = plotSignals(h,S,channel,signal,unit,idxBoth,idxPc,idxRcvr);
end

%%
S = MavLink.Nav;
if isfield(S,'time')
    slvFigure('Nav');
    [idxBoth idxPc idxRcvr] = findIdxRgn(S.time,pc104On,rcvrOn);
    % [idxBoth idxPc idxRcvr] = findIdxRgn(S.nav_roll.time,pc104On,rcvrOn);
    channel = [ ...
               {'nav_roll'}; ...
               {'nav_pitch'}; ...
               {'nav_bearing'}; ...
               {'target_bearing'}; ...
               {'wp_dist'}; ...
               {'alt_error'}; ...
               {'aspd_error'}; ...
               {'xtrack_error'}; ...
              ];
    signal = [ ...
               {'Nav(nav roll)'}; ...
               {'Nav(nav pitch)'}; ...
               {'Nav(nav bearing)'}; ...
               {'Nav(target bearing)'}; ...
               {'Nav(wp dist)'}; ...
               {'Nav(alt error)'}; ...
               {'Nav(aspd error)'}; ...
               {'Nav(xtrack error)'}; ...
              ];
    unit = [ ...
               {'deg'}; ...
               {'deg'}; ...
               {'deg'}; ...
               {'deg'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
               {'()'}; ...
              ];
    h = plotSignals(h,S,channel,signal,unit,idxBoth,idxPc,idxRcvr);
end

%%
function h = plotSignals(h,S,channel,signal,unit,idxBoth,idxPc,idxRcvr)
    N = length(channel);
    NR = ceil(sqrt(N));
    NC = floor(N/NR);
    if ((N==6) || (N==8))
        NR = 2;
        NC = 4;
    end
    if (N==3)
        NR = 1;
        NC = 4;
    end
    if (N==9)
        NR = 3;
        NC = 4;
    end
    if (N==12)
        NR = 4;
        NC = 4;
    end
    for i=1:N
        if (isempty(h))
            h=subplot(NR,NC,i);
        else
            if ((N==6) && (i>3))
                h=[h; subplot(NR,NC,i+1)];
            else
                if ((N==9) && (i>6))
                    h=[h; subplot(NR,NC,i+2)];
                else
                    if ((N==9) && (i>3))
                        h=[h; subplot(NR,NC,i+1)];
                    else
                        if ((N==12) && (i>9))
                            h=[h; subplot(NR,NC,i+3)];
                        else
                            if ((N==12) && (i>6))
                                h=[h; subplot(NR,NC,i+2)];
                            else
                                if ((N==12) && (i>3))
                                    h=[h; subplot(NR,NC,i+1)];
                                else
                                    h=[h; subplot(NR,NC,i)];
                                end
                            end
                        end
                    end
                end
            end
        end
        hold off
        plot(S.time,S.(channel{i}),':b.');
%         plot(S.(channel{i}).time,S.(channel{i}).data,'b.');
        hold on
        grid on
        title(signal{i});
        ylabel(unit{i});
        xlabel('time (sec)');
        
        %legend(signal{i},'Location','Best');
        if ~isempty(idxBoth)
            plot(S.time(idxBoth),S.(channel{i})(idxBoth),'r.');
%             plot(S.(channel{i}).time(idxBoth),S.(channel{i}).data(idxBoth),'r.');
        end
        if ~isempty(idxRcvr)
            plot(S.time(idxRcvr),S.(channel{i})(idxRcvr),'g.');
%             plot(S.(channel{i}).time(idxRcvr),S.(channel{i}).data(idxRcvr),'g.');
        end
        if ~isempty(idxPc)
            plot(S.time(idxPc)  ,S.(channel{i})(idxPc)  ,'c.');
%             plot(S.(channel{i}).time(idxPc)  ,S.(channel{i}).data(idxPc)  ,'c.');
        end
    end
    linkaxes(h,'x');
    pause(1);
return

%%
function [idxBoth idxPc idxRcvr] = findIdxRgn(time,pcON,rcON)
    P = size(pcON,1);
    R = size(rcON,1);
    idxBoth = [];
    for j=1:R
    for k=1:P
        stime = max(rcON(j,1),pcON(k,1));
        etime = min(rcON(j,2),pcON(k,2));
        idxBoth = [idxBoth; find((time>=stime) & (time<=etime))];
    end
    end
    
    idxRcvr = [];
    for j=1:R
        idxRcvr = [idxRcvr; find((time>=rcON(j,1)) & (time<=rcON(j,2)))];
    end
    if ~isempty(idxRcvr)
        idxRcvr = setdiff(idxRcvr,idxBoth);
    end
    
    idxPc = [];
    for k=1:P
        idxPc = [idxPc; find(time>=pcON(k,1) & time<=pcON(k,2))];
    end
    if ~isempty(idxPc)
        idxPc = setdiff(idxPc,idxBoth);
    end
return

