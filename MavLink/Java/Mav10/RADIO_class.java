//MavLink 1.0

//package gov.nasa.larc.AP;
//import gov.nasa.larc.serial.Loggable;

/**
Message ID: RADIO(166)
--------------------------------------
%%~ Status generated by radio
--------------------------------------
*/
public class RADIO_class //implements Loggable
{
	public static final int msgID = 166;
	public short	 rssi;	 	// local signal strength
	public short	 remrssi;	 	// remote signal strength
	public short	 txbuf;	 	// how full the tx buffer is as a percentage
	public short	 noise;	 	// background noise level
	public short	 remnoise; 	// remote background noise level
	public int		 rxerrors; 	// receive errors
	public int		 fixed;	 	// count of error corrected packets

	private packet rcvPacket;
	private packet sndPacket;

	public RADIO_class()
	{
		rcvPacket = new packet(msgID);
		sndPacket = new packet(msgID);
	}

	public RADIO_class(RADIO_class o)
	{
		rssi = o.rssi;
		remrssi = o.remrssi;
		txbuf = o.txbuf;
		noise = o.noise;
		remnoise = o.remnoise;
		rxerrors = o.rxerrors;
		fixed = o.fixed;
	}

	public boolean parse(byte[] b)
	{
		return parse(b, false);
	}

	public boolean parse(byte[] b, boolean valid)
	{
		rcvPacket.load(b);

		boolean pstatus = valid || rcvPacket.isPacket();
		if (pstatus)
		{
			rcvPacket.updateSeqNum();

			// int[] mavLen = {1, 1, 1, 1, 1, 2, 2};
			// int[] javLen = {2, 2, 2, 2, 2, 4, 4};

			rssi		= rcvPacket.getShortB();
			remrssi	= rcvPacket.getShortB();
			txbuf	= rcvPacket.getShortB();
			noise	= rcvPacket.getShortB();
			remnoise	= rcvPacket.getShortB();
			rxerrors	= rcvPacket.getIntS();
			fixed	= rcvPacket.getIntS();
		}
		return(pstatus);
	}

	public byte[] encode()
	{
		return encode(
					  rssi
					 ,remrssi
					 ,txbuf
					 ,noise
					 ,remnoise
					 ,rxerrors
					 ,fixed
					 );
	}

	public byte[] encode(
						 short v_rssi
						,short v_remrssi
						,short v_txbuf
						,short v_noise
						,short v_remnoise
						,int v_rxerrors
						,int v_fixed
						)
	{
		// int[] mavLen = {1, 1, 1, 1, 1, 2, 2};
		// int[] javLen = {2, 2, 2, 2, 2, 4, 4};

		sndPacket.setSndSeq();

		sndPacket.resetDataIdx();
		sndPacket.putByteS(v_rssi);	// Add "rssi" parameter
		sndPacket.putByteS(v_remrssi);	// Add "remrssi" parameter
		sndPacket.putByteS(v_txbuf);	// Add "txbuf" parameter
		sndPacket.putByteS(v_noise);	// Add "noise" parameter
		sndPacket.putByteS(v_remnoise);	// Add "remnoise" parameter
		sndPacket.putShortI(v_rxerrors);	// Add "rxerrors" parameter
		sndPacket.putShortI(v_fixed);	// Add "fixed" parameter

		// encode the checksum

		sndPacket.putChkSum();

		return sndPacket.getPacket();
	}

	public String getLogHeader()
	{
		String param = (
				  "  time"
 				+ ", RADIO_rssi"
 				+ ", RADIO_remrssi"
 				+ ", RADIO_txbuf"
 				+ ", RADIO_noise"
 				+ ", RADIO_remnoise"
 				+ ", RADIO_rxerrors"
 				+ ", RADIO_fixed"
				);
		return param;
	}

    public String getLogData()
	{
		String param = (
				System.currentTimeMillis()
 				+ ", " + rssi
 				+ ", " + remrssi
 				+ ", " + txbuf
 				+ ", " + noise
 				+ ", " + remnoise
 				+ ", " + rxerrors
 				+ ", " + fixed
				);
		return param;
	}
}
